#!/usr/bin/env python
import yaml
import sys
from subprocess import call 
import os
from os import walk

ESROCOS_YAML = "esrocos.yml"
ROOT_DIR = os.environ['AUTOPROJ_CURRENT_ROOT']

project_name = ""
SRC_DIR = ""
INSTALLED_TYPES_DIR = ""
INSTALLED_PKGS_DIR = ""
# READ YAML

print "read esrocos.yml...",

data = []

try:
  with open(ESROCOS_YAML, 'r') as infile:

    data = yaml.load(infile)
    project_name = data["PROJECT_NAME"]
    SRC_DIR = data["ASNACN_DIR"]
    INSTALLED_TYPES_DIR = data["INSTALLED_TYPES_DIR"]
  
except IOError:
  print "could not read esrocos.yml, aborting..."
  sys.exit()
except KeyError:
  print "error parsing esrocos.yml, aborting..."
  sys.exit()

print "DONE"

# CREATE PRE INIT SCRIPT

build_partition = "x86_partition:"
link_libraries = ""
link_info_file = "linkings.yml"


first = True

# open link_library yml file

link_data = []

try:
  with open(link_info_file, 'r') as infile:
  
    data = yaml.load(infile)
    try:
      link_data = data['libs']
      try: 
        
        for lib in link_data:
          if not first:
            link_libraries += ","
          else: 
            first = False
           
          link_libraries += lib
      except TypeError:
        print "empty linking list, proceed..." 
    except KeyError:
      print "no link data, proceed..."
except IOError:
  print "could not read linkings.yml in "+link_info_file+", aborting..."
  sys.exit()
except KeyError:
  print "could not read linkings.yml in "+link_info_file+", aborting..."
  sys.exit()

print "DONE"

# write infos to user_init_pre.sh

orchestrator_options = ""

if link_libraries != "":
  orchestrator_options = " --with-extra-lib "+build_partition+link_libraries

deployment_view = project_name+'_dp.aadl'

if not 'ORCHESTRATOR_OPTIONS' in os.environ:
  os.environ["ORCHESTRATOR_OPTIONS"] = "" 

os.environ["ORCHESTRATOR_OPTIONS"] += orchestrator_options
os.environ["ORCHESTRATOR_OPTIONS"] += " --no-retry"

os.environ["DEPLOYMENTVIEW"] = deployment_view

# RUN BUILD SCRIPT

taste_arguments = ["./build-script.sh"]

call(taste_arguments)

