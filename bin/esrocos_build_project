#!/usr/bin/env python
import yaml
import sys
from subprocess import call 
import os
from os import walk

ESROCOS_YAML = "esrocos.yml"
ROOT_DIR = os.environ['AUTOPROJ_CURRENT_ROOT']
LINKINGS_YAML = "build/linkings.yml"
INCLUDES_YAML = "build/includes.yml"

project_name = ""

# READ ESROCOS YAML

print "read esrocos.yml...",

data = []

try:
  with open(ESROCOS_YAML, 'r') as infile:

    data = yaml.load(infile)
    project_name = data["PROJECT_NAME"]
    ASN_DIR = data["ASNACN_DIR"]
  
except IOError:
  print "could not read esrocos.yml, aborting..."
  sys.exit()
except KeyError:
  print "error parsing esrocos.yml, aborting..."
  sys.exit()

print "DONE"
#CONFIGURE ORCHESTRATOR_OPTIONS
linkings = {}
includes = {}
orchestrator_options = ""

# open link_library yml file and read linking info
print "generate Orchestrator option",
try:
  with open(LINKINGS_YAML, 'r') as infile:
  
    data = yaml.load(infile)

    # If yaml.load returns an data which cannot be handled by the for loop, we fix it :)
    if (not data) or (data is None):
      data = []

    for partition in data:
      libs = data[partition]
	
      if (not libs) or (libs is None):
        print "Info: No libs for "+partition
        libs = []
      else:
        linkings[partition] = " -l "+partition+":"       
        first = True  
        for lib in libs:
          if not first:
            linkings[partition] += ","
          else: 
            first = False
          print "Adding lib "+lib+" to "+partition
          linkings[partition] += lib
          
except IOError:
  print "could not read or find linkings.yml in "+LINKINGS_YAML+", no linkings..."
except KeyError:
  print "could not read linkings.yml in "+LINKINGS_YAML+", aborting..."
  sys.exit()

# open includes yml file and read include info
print "generate Orchestrator option",
try:
  with open(INCLUDES_YAML, 'r') as infile:
  
    data = yaml.load(infile)

    # If yaml.load returns an data which cannot be handled by the for loop, we fix it :)
    if (not data) or (data is None):
      data = []

    for partition in data:
      paths = data[partition]
      includes[partition] = ""

      if (not paths) or (paths is None):
        print "Info: No include paths for "+partition
        paths = []
      
      for path in paths:
          print "Adding include path "+path+" to "+partition
          includes[partition] += " -e "+partition+":"+path 
          
except IOError:
  print "could not read or find includes.yml in "+INCLUDES_YAML+", no includes..."
except KeyError:
  print "could not read includes.yml in "+INCLUDES_YAML+", aborting..."
  sys.exit()


for entry in linkings:
  orchestrator_options += linkings[entry]  

for entry in includes:
  orchestrator_options += includes[entry]

print "DONE"

print orchestrator_options

deployment_view = project_name+'_dp.aadl'

if not 'ORCHESTRATOR_OPTIONS' in os.environ:
  os.environ["ORCHESTRATOR_OPTIONS"] = "" 

os.environ["ORCHESTRATOR_OPTIONS"] += orchestrator_options
os.environ["ORCHESTRATOR_OPTIONS"] += " --no-retry"

os.environ["DEPLOYMENTVIEW"] = deployment_view

# RUN BUILD SCRIPT

taste_arguments = ["./build-script.sh"]

sys.exit(call(taste_arguments))
