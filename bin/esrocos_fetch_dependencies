#!/usr/bin/env python
import yaml
import sys
import xml.etree.cElementTree as ET
from subprocess import call 

ESROCOS_YAML = "esrocos.yml"

project_name = ""
SRC_DIR = ""
INSTALL_DIR = ""

# READ YAML

print "read esrocos.yml...",

data = []

try:
  with open(ESROCOS_YAML, 'r') as infile:

    data = yaml.load(infile)

    project_name = data["PROJECT_NAME"]
    SRC_DIR = data["ASNACN_DIR"]
    INSTALL_DIR = data["INSTALLED_TYPES_DIR"]
   
    print data

except IOError:
  print "could not read esrocos.yml, aborting..."
  sys.exit()
except KeyError:
  print "error parsing esrocos.yml, aborting..."
  sys.exit()

print "DONE"

# EXTRACT OSDEPS

try:
  os_deps = data['os_deps']
except KeyError as err:
  print "error in reading yml data, aborting..."
  sys.exit()

for dep in os_deps:
  print dep

# EXTRACT PKG DEPS

try:
  pkg_deps = data['pkg_deps']
except KeyError as err:
  print "error in reading yml data, aborting..."
  sys.exit()

for dep in pkg_deps:
  print dep

# EXTRACT UNKNOWN PKG DEPS

# GENERATE tmp AUTOPROJ MANIFEST
print "generate autoproj...",

pkg = ET.Element("package")

ET.SubElement(pkg, "depend", package="esrocos_base/types/base")
ET.SubElement(pkg, "depend", package="esrocos_base/types/nonexistent")

tree = ET.ElementTree(pkg)
tree.write("manifest.xml")

print "DONE"

# TEMP PACKAGE SET FOR UNKNOWN DEPS

# AUP

aup_arguments = ["autoproj","update"]

call(aup_arguments)
sys.exit()
# COPY ASN

print "installing shared types...\t", 
sys.stdout.flush()

SHARED_DIR = "../install/types/"

aadl_files = []
d = []
 
for (dirpath, dirnames, filenames) in walk(SHARED_DIR):
  d.extend(dirnames)
  break

for dirname in d:
  f = []  

  try:
    os.makedirs(INSTALL_DIR+dirname+"/asn")
  except OSError as err:
    if not err.errno == 17: 
      raise err  

  for (dirpath, dirnames, filenames) in walk(SHARED_DIR):
    f.extend(filenames)
    
    for filename in f:
      try:
#        print filename
#        print "from: "+SHARED_DIR+dirname+"/asn/"+filename
#        print "to: "+INSTALL_DIR+dirname+"/asn/"+filename
        copyfile(SHARED_DIR+dirname+"/asn/"+filename,INSTALL_DIR+dirname+"/asn/"+filename)
      except IOError as err:
        raise err

#getting asn and acn files from folder

asn_acn_files = []
asn_filenames = []

for (dirpath, dirnames, filenames) in walk(SRC_DIR):
  f.extend(filenames)
  for filename in filenames:
    if filename.endswith(".asn") or filename.endswith(".acn"):
      if not filename in asn_filenames:
        asn_acn_files.append(os.getcwd()+"/"+os.path.join(dirpath,filename))
        asn_filenames.append(filename)
      else: 
        print "duplicate: "+filename

for (dirpath, dirnames, filenames) in walk(INSTALL_DIR):
  f.extend(filenames)
  for filename in filenames:
    if filename.endswith(".asn") or filename.endswith(".acn"):
      if not filename in asn_filenames:
        asn_acn_files.append(os.getcwd()+"/"+os.path.join(dirpath,filename))
        asn_filenames.append(filename)
      else: 
        print "duplicate: "+filename

#print asn_acn_files

asn_arguments = ["asn2aadlPlus"]
asn_arguments.extend(asn_acn_files)
asn_arguments.append(os.getcwd()+ "/" + INSTALL_DIR + project_name.replace(" ", "_") + "_dv.aadl")

call(asn_arguments)

# CLEANUP

print "clean tmp files...",

print "DONE"
