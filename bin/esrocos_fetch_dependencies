#!/usr/bin/env python
import yaml
import sys
import os
import xml.etree.cElementTree as ET
from subprocess import call 

ESROCOS_YAML = "esrocos.yml"

project_name = ""
SRC_DIR = ""
INSTALL_DIR = ""

# READ YAML

print "read esrocos.yml...",

data = []

try:
  with open(ESROCOS_YAML, 'r') as infile:

    data = yaml.load(infile)
    project_name = data["PROJECT_NAME"]
    SRC_DIR = data["ASNACN_DIR"]
    INSTALL_DIR = data["INSTALLED_TYPES_DIR"]
  
except IOError:
  print "could not read esrocos.yml, aborting..."
  sys.exit()
except KeyError:
  print "error parsing esrocos.yml, aborting..."
  sys.exit()

print "DONE"

# EXTRACT OSDEPS

try:
  os_deps = data['os_deps']
except KeyError as err:
  print "error in reading yml data, aborting..."
  sys.exit()

# EXTRACT LOCAL AND REMOTE PKG DEPS

try:
  pkg_deps = data['pkg_deps']
except KeyError as err:
  print "error in reading yml data, aborting..."
  sys.exit()

# GENERATE LOCAL manifest.xml
print "generate manifest.xml",

package = ET.Element("package")

# generate entries for all packages to force package existence at compile time
for dep in pkg_deps:
  for key in dep:
    if not dep[key]:
      ET.SubElement(package, "depend", package=key)   

for dep in os_deps:
  ET.SubElement(package, "depend", package=dep)
  
manifest = ET.ElementTree(package)
manifest.write("manifest.xml")

print "DONE" 

# GENERATE SOURCE ENTRIES FOR UNKNOWN DEPS
print "trying to open existing overrides.yml"

#open overrides.yml

path = os.environ['AUTOPROJ_CURRENT_ROOT']+"/autoproj/overrides.yml"
data = {}

try:
  with open(path, 'r') as overrides:
    print "parsing yml data"
    data = yaml.load(overrides)
except IOError as err:
  print "did not find existing overrides.yml..."
  data = {'version_control':[]}

# manipulate overrides.yml

for dep in pkg_deps:
  for key in dep:  
    if key == 'github':  
      data['version_control'].append(dep)

# write back to overrides.yml
try:
  with open(path, 'w') as outfile:
    yaml.dump(data, outfile, default_flow_style=False, allow_unicode=True)
except IOError as err:
  print "could not write to file, aborting..."
  sys.exit()

# ADVERTISE LOCAL AND REMOTE DEPS IN LOCAL.AUTOBUILD
path = os.environ['AUTOPROJ_CURRENT_ROOT']+"/autoproj/"+project_name+".autobuild"

try:
  with open(path, 'w') as outfile:
    outfile.write('import_package "'+project_name+'"\n')
    for dep in pkg_deps:
      for key in dep: 
        if not dep[key]:
          outfile.write('import_package "'+key+'"\n')
 
except IOError as err:
  print "could not write to file, exit..."
  sys.exit()

print "DONE"

# AUP

aup_arguments = ["autoproj","update"]

call(aup_arguments)

sys.exit()

# REMOVE tmp FILES

print "DONE"

# remove manifest

os.remove(path)

# remove overrides.yml

os.remove(path)

print "clean tmp files...",

# COPY ASN

print "installing shared types...\t", 
sys.stdout.flush()

SHARED_DIR = "../install/types/"

aadl_files = []
d = []
 
for (dirpath, dirnames, filenames) in walk(SHARED_DIR):
  d.extend(dirnames)
  break

for dirname in d:
  f = []  

  try:
    os.makedirs(INSTALL_DIR+dirname+"/asn")
  except OSError as err:
    if not err.errno == 17: 
      raise err  

  for (dirpath, dirnames, filenames) in walk(SHARED_DIR):
    f.extend(filenames)
    
    for filename in f:
      try:
#        print filename
#        print "from: "+SHARED_DIR+dirname+"/asn/"+filename
#        print "to: "+INSTALL_DIR+dirname+"/asn/"+filename
        copyfile(SHARED_DIR+dirname+"/asn/"+filename,INSTALL_DIR+dirname+"/asn/"+filename)
      except IOError as err:
        raise err

#getting asn and acn files from folder

asn_acn_files = []
asn_filenames = []

for (dirpath, dirnames, filenames) in walk(SRC_DIR):
  f.extend(filenames)
  for filename in filenames:
    if filename.endswith(".asn") or filename.endswith(".acn"):
      if not filename in asn_filenames:
        asn_acn_files.append(os.getcwd()+"/"+os.path.join(dirpath,filename))
        asn_filenames.append(filename)
      else: 
        print "duplicate: "+filename

for (dirpath, dirnames, filenames) in walk(INSTALL_DIR):
  f.extend(filenames)
  for filename in filenames:
    if filename.endswith(".asn") or filename.endswith(".acn"):
      if not filename in asn_filenames:
        asn_acn_files.append(os.getcwd()+"/"+os.path.join(dirpath,filename))
        asn_filenames.append(filename)
      else: 
        print "duplicate: "+filename

#print asn_acn_files

asn_arguments = ["asn2aadlPlus"]
asn_arguments.extend(asn_acn_files)
asn_arguments.append(os.getcwd()+ "/" + INSTALL_DIR + project_name.replace(" ", "_") + "_dv.aadl")

call(asn_arguments)

