#!/usr/bin/env python

import os.path
import os
import yaml
import sys
import subprocess
from subprocess import call 

ESROCOS_YAML = "esrocos.yml"
ASN_DIR = "dataview/"

print "init esrocos project..."
sys.stdout.flush()

if len(sys.argv) == 2:

  path = sys.argv[1]
  try: 
    os.makedirs(path)
    os.chdir(path)
    project_name = sys.argv[1]
  except OSError:
    if not os.path.isdir(path):
      raise

else: 
  print "usage: esrocos_create_project <project name>"
  sys.exit()


#AT THIS POINT WE SHOULD BE IN THE NEW WORKSPACE DIR ONE WAY OR THE OTHER

try: 
  with open(ESROCOS_YAML, 'r') as stream:
    try:
      print "found existing esrocos.yml, use esrocos-edit-project instead."
      sys.exit()
    except yaml.YAMLError as err:
      print "creating esrocos.yml"
except IOError as err:
  print "no file found, creating.."
  
#INTERACTIVELY ASK FOR DEPENDENCIES

deps = []

print "Please enter dependencies, proceed by pressing return"
user_input = "default"
while not user_input == "":
  user_input = raw_input("> ")
  if not user_input == "":
    deps.append(user_input)

print deps
print "please make sure autoproj is able to resolve these dependencies."

#GENERATE CONF FILE

data = {}
data["PROJECT_NAME"] = project_name
data["deps"] = []

for dep in deps:
  data["deps"].append({dep:''})

data["ASNACN_DIR"] = ASN_DIR

try:
  with open(ESROCOS_YAML, 'w') as outfile:
    yaml.dump(data, outfile, default_flow_style=False, allow_unicode=True)
except IOError as err:
  print "could not write to file, exit..."
  sys.exit()

#CREATE FOLDER STRUCTURE
print "create folder structure...\t",
sys.stdout.flush()

try:
  os.makedirs(ASN_DIR)
except OSError as err:
  if not err.errno == 17: 
    print "FAILED"
    raise

print "DONE"

# ADVERTISE PROJECT IN AUTOPROJ/LOCAL.AUTOBUILD
print "create local autobuild...\t",
project_name_ = project_name
project_name_.replace("/","-")

path = os.environ['AUTOPROJ_CURRENT_ROOT']+"/autoproj/"+project_name_+".autobuild"

try:
  with open(path, 'a') as outfile:
    outfile.write('esrocos_package "'+project_name+'"')

except IOError as err:
  print "could not write to file, exit..."
  sys.exit()

print "DONE"

#CREATE ASN FILES

print "create asn file...\t\t",

data_view_asn = "ESROCOS-" + project_name.replace("_","-") + """ DEFINITIONS ::=
BEGIN

MyDummyInteger::=INTEGER(0..255)
-- Define your own data types and constants here 

END
  """

try:
  with open(ASN_DIR+project_name.replace(' ', '_') +".asn", 'w') as outfile:
    outfile.write(data_view_asn)
except IOError as err:
  print "FAILED"
  raise
else:
  print "DONE"

#CREATE ACN MODELS
print "generate acn files...\t\t",
sys.stdout.flush()

asn1_args = ["which", "asn1.exe"]
proc = subprocess.Popen(asn1_args, stdout=subprocess.PIPE)
asn1 = proc.stdout.read().rstrip()

mono_args=["mono", asn1, "-o", ASN_DIR, "-ACND", ASN_DIR +project_name.replace(' ', '_') + '.asn']

call(mono_args)

print"DONE"
#GENERATE DATA VIEW
print "generate data view files...\t", 
sys.stdout.flush()

print "DONE"

# COPY CMAKE TEMPLATE
print "generate CMakeLists.txt...\t",

try:
  inpath = os.environ['ESROCOS_TEMPLATES'] + "/CMakeLists.txt.in"
  outpath = os.environ['AUTOPROJ_CURRENT_ROOT'] + "/" + project_name + "/CMakeLists.txt"
  
  with open(inpath, 'r') as infile, open (outpath, 'w') as outfile:
    # read
    data = infile.read()
    # replace  
    data = data.replace("@PROJECT@", project_name)
    dara = data.replace("@FILE@", outpath)

    # write
    outfile.write(data)

except IOError as err:
  print "FAILED"
  raise
else:
  print "DONE"

#FINALLY
print """
ESROCOS project initialized successfully.
Edit dependencies in >>esrocos.yml<< and >>CMakeLists.txt<<.
Fetch Dependencies with >>esrocos_fetch_dependencies<<.
Then edit the project by calling >>esrocos_edit_project<<.
Generate code stubs with >>esrocos_generate_skeletons<<.
Build the project with >>amake<<.
"""
