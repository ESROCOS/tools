#!/usr/bin/env python

import os.path
import os
import yaml
import sys
import subprocess
from subprocess import call 
from os import walk
from shutil import copyfile

ESROCOS_YAML = "esrocos.yml"
DEFAULT_PROJECT_NAME = "esrocos_project"
SRC_DIR = "dataview/"
INSTALL_DIR = "installed_types/"

print "init esrocos project..."
sys.stdout.flush()

if len(sys.argv) == 2:

  path = sys.argv[1]
  try: 
    os.makedirs(path)
    os.chdir(path)
    project_name = sys.argv[1]
  except OSError:
    if not os.path.isdir(path):
      raise

else: 
  print "usage: esrocos_create_project <project name>"
  sys.exit()


#AT THIS POINT WE SHOULD BE IN THE NEW WORKSPACE DIR ONE WAY OR THE OTHER

try: 
  with open(ESROCOS_YAML, 'r') as stream:
    try:
      print "found existing esrocos.yml, use esrocos-edit-project instead."
      sys.exit()
    except yaml.YAMLError as err:
      print "creating esrocos.yml"
except IOError as err:
  print "no file found, creating.."


#INTERACTIVELY ASK FOR OS DEPENDENCIES

print "Please enter the projects OS dependencies, proceed by pressing return"
os_deps = []
user_input = "default"
while not user_input == "":
  user_input = raw_input("> ")
  if not user_input == "":
    os_deps.append(user_input)

print os_deps  
  
#INTERACTIVELY ASK FOR PACKAGE DEPENDENCIES

pkg_deps = []

print "Please enter package dependencies, proceed by pressing return"
user_input = "default"
while not user_input == "":
  user_input = raw_input("> ")
  if not user_input == "":
    pkg_deps.append(user_input)

print pkg_deps

#GENERATE CONF FILE

data = {}
data["PROJECT_NAME"] = project_name
data["os_deps"] = os_deps
data["pkg_deps"] = pkg_deps
data["ASNACN_DIR"] = SRC_DIR
data["INSTALLED_TYPES_DIR"] = INSTALL_DIR 

try:
  with open(ESROCOS_YAML, 'w') as outfile:
    yaml.dump(data, outfile, default_flow_style=False, allow_unicode=True)
except IOError as err:
  print "could not write to file, exit..."
  sys.exit()

#CREATE FOLDER STRUCTURE
print "create folder structure...\t",
sys.stdout.flush()

try:
  os.makedirs(SRC_DIR)
except OSError as err:
  if not err.errno == 17: 
    print "FAILED"
    raise

try: 
  os.makedirs(INSTALL_DIR)
except OSError as err:
  if not err.errno == 17: 
    print "FAILED"
    raise

print "DONE"

#CREATE ASN FILES
#print "copy taste-types...\t\t",
#sys.stdout.flush()

#lproc = subprocess.Popen(["taste-config","--prefix"], stdout=subprocess.PIPE)
#tasteconfig = proc.stdout.read().rstrip()

#cp_arguments = ["cp",tasteconfig + "/share/taste-types/taste-types.asn", SRC_DIR + "/taste-types.asn"]

#call(cp_arguments)

#print "DONE"

print "create asn file...\t\t",

data_view_asn = "ESROCOS-" + project_name.replace("_","-") + """ DEFINITIONS ::=
BEGIN

MyDummyInteger::=INTEGER(0..255)
-- Define your own data types and constants here 

END
  """

try:
  with open(SRC_DIR+project_name.replace(' ', '_') +".asn", 'w') as outfile:
    outfile.write(data_view_asn)
except IOError as err:
  print "FAILED"
  raise
else:
  print "DONE"

#CREATE ACN MODELS
print "generate acn files...\t\t",
sys.stdout.flush()

asn1_args = ["which", "asn1.exe"]
proc = subprocess.Popen(asn1_args, stdout=subprocess.PIPE)
asn1 = proc.stdout.read().rstrip()

mono_args=["mono", asn1, "-o", SRC_DIR, "-ACND", SRC_DIR +project_name.replace(' ', '_') + '.asn']

call(mono_args)

print"DONE"

#GENERATE DATA VIEW
print "generate data view files...\t", 
sys.stdout.flush()

print "DONE"

#FINALLY
print "ESROCOS project initialized successfully. Fetch Dependencies with esrocos_fetch_dependencies then edit the project by calling 'esrocos_edit_project'"
